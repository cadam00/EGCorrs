library(terra)
# library(httr2)
# library(ncdf4)
library(stars)
# library(lubridate)
# library(leaflet)
# library(leaflet.extras2)
# library(dplyr)
########################################################
#https://www.eea.europa.eu/en/datahub/datahubitem-view/6fc8ad2d-195d-40f4-bdec-576e7d1268e4
setwd("C:/Users/Administrator/Desktop/test_analysis/corridors/corridors_chr")
NATURA <- st_read("Natura/natura_WGS84.shp")
merged_Med <- st_read("examined_area.shp")
normalize_weights<-TRUE
remove_parts<-"NO"
# Origin shapefiles (could be a single one shapefile)
start_code<- "GR3000019"
start_area<-NATURA[NATURA[,1][[1]]==start_code,]
start_code_2<-"GR4220005"
start_area_2<-NATURA[NATURA[,1][[1]]==start_code_2,]
start_code_3<-"GR4210021"
start_area_3<-NATURA[NATURA[,1][[1]]==start_code_3,]
start_code_4<-"GR4210026"
start_area_4<-NATURA[NATURA[,1][[1]]==start_code_4,]
# Destination shapefile
end_code<-"GR4320006"
end_area<-NATURA[NATURA[,1][[1]]==end_code,]
rm(NATURA) #we delete it from memory because its very heavy
#https://data.marine.copernicus.eu/product/MEDSEA_ANALYSISFORECAST_PHY_006_013/description
nc_data <- read_stars("currents.nc")
currents_xy <- nc_data[,,,1, drop = TRUE]
cost_raster_input_x <- rast(currents_xy[1])
crs(cost_raster_input_x) <- st_crs(merged_Med)$wkt
cost_raster_yes_x <- crop(cost_raster_input_x, st_bbox(merged_Med)[c(1,3,2,4)], mask=TRUE)
cost_raster_input_y <- rast(currents_xy[2])
crs(cost_raster_input_y) <- st_crs(merged_Med)$wkt
cost_raster_yes_y <- crop(cost_raster_input_y, st_bbox(merged_Med)[c(1,3,2,4)], mask=TRUE)
rm(nc_data) #we delete it from memory because its very heavy
rm(currents_xy) #we delete it from memory because its very heavy
end_areas <- end_area
origin_areas <- rbind(start_area, start_area_2, start_area_3, start_area_4)
source("C:/Users/Administrator/Documents/packages/SeaGames/R/sea_game_theory.R")
npoints <- 10
mask_shapefile <- NULL
k_neighbors <- 7
nearest_grid_nodes <- 4
niters      <- 50
lambda      <- 1
component_u <- cost_raster_yes_x
component_v <- cost_raster_yes_y
destination_areas   <- start_area_2#end_area
origin_areas <- start_area#rbind(start_area, start_area_2, start_area_3, start_area_4)
all_networks <- FALSE
component_u <- crop(component_u, ext(rbind(origin_areas, destination_areas)))
component_v <- crop(component_v, ext(rbind(origin_areas, destination_areas)))
st_write
?st_write
st_write(st_transform(st_geometry(destination_areas),crs(component_u)), "C://Users//Administrator//Documents//packages//SeaGames//inst//external//destination_areas//destination_areas.shp")
st_crs(st_read("C://Users//Administrator//Documents//packages//SeaGames//inst//external//destination_areas//destination_areas.shp"))$wkt == crs(SeaGames::component_u())
st_crs(st_read("C://Users//Administrator//Documents//packages//SeaGames//inst//external//destination_areas//destination_areas.shp"))$wkt == crs(SeaGames::get_component_u())
st_crs(st_read("C://Users//Administrator//Documents//packages//SeaGames//inst//external//destination_areas//destination_areas.shp")) == crs(SeaGames::get_component_u())
get_destination_areas <- function(){
destination_areas <-
st_read(system.file("external/destination_areas/destination_areas.shp",
package="SeaGames"))
st_transform(destination_areas, crs(get_component_u()))
}
set.seed(42)
component_u       <- get_component_u()
component_v       <- get_component_v()
origin_areas      <- get_origin_areas()
destination_areas <- get_destination_areas()
out               <- SeaGames(component_u, component_v, origin_areas,
destination_areas, npoints = 1,  niters = 10)
##
library(ggplot2)
# library(RANN)
library(igraph)
# library(reshape2)
library(sfnetworks)
# library(Rcppgreedy)
# library(spatstat)
library(sf)
library(tmap)
tmap_mode("view")
library(terra)
# library(httr2)
# library(ncdf4)
library(stars)
# library(lubridate)
# library(leaflet)
# library(leaflet.extras2)
# library(dplyr)
########################################################
#https://www.eea.europa.eu/en/datahub/datahubitem-view/6fc8ad2d-195d-40f4-bdec-576e7d1268e4
setwd("C:/Users/Administrator/Desktop/test_analysis/corridors/corridors_chr")
NATURA <- st_read("Natura/natura_WGS84.shp")
merged_Med <- st_read("examined_area.shp")
normalize_weights<-TRUE
remove_parts<-"NO"
# Origin shapefiles (could be a single one shapefile)
start_code<- "GR3000019"
start_area<-NATURA[NATURA[,1][[1]]==start_code,]
start_code_2<-"GR4220005"
start_area_2<-NATURA[NATURA[,1][[1]]==start_code_2,]
start_code_3<-"GR4210021"
start_area_3<-NATURA[NATURA[,1][[1]]==start_code_3,]
start_code_4<-"GR4210026"
start_area_4<-NATURA[NATURA[,1][[1]]==start_code_4,]
# Destination shapefile
end_code<-"GR4320006"
end_area<-NATURA[NATURA[,1][[1]]==end_code,]
rm(NATURA) #we delete it from memory because its very heavy
#https://data.marine.copernicus.eu/product/MEDSEA_ANALYSISFORECAST_PHY_006_013/description
nc_data <- read_stars("currents.nc")
currents_xy <- nc_data[,,,1, drop = TRUE]
cost_raster_input_x <- rast(currents_xy[1])
crs(cost_raster_input_x) <- st_crs(merged_Med)$wkt
cost_raster_yes_x <- crop(cost_raster_input_x, st_bbox(merged_Med)[c(1,3,2,4)], mask=TRUE)
cost_raster_input_y <- rast(currents_xy[2])
crs(cost_raster_input_y) <- st_crs(merged_Med)$wkt
cost_raster_yes_y <- crop(cost_raster_input_y, st_bbox(merged_Med)[c(1,3,2,4)], mask=TRUE)
rm(nc_data) #we delete it from memory because its very heavy
rm(currents_xy) #we delete it from memory because its very heavy
end_areas <- end_area
origin_areas <- rbind(start_area, start_area_2, start_area_3, start_area_4)
source("C:/Users/Administrator/Documents/packages/SeaGames/R/sea_game_theory.R")
npoints <- 10
mask_shapefile <- NULL
k_neighbors <- 7
nearest_grid_nodes <- 4
niters      <- 50
lambda      <- 1
component_u <- cost_raster_yes_x
component_v <- cost_raster_yes_y
destination_areas   <- start_area_2#end_area
origin_areas <- start_area#rbind(start_area, start_area_2, start_area_3, start_area_4)
all_networks <- FALSE
component_u <- crop(component_u, ext(rbind(origin_areas, destination_areas)))
component_v <- crop(component_v, ext(rbind(origin_areas, destination_areas)))
# for (lambda in c(1e-6, 1, 1e+6)){
set.seed(42)
tic <- Sys.time()
out <- SeaGames(component_u, component_v, origin_areas, destination_areas,
npoints = npoints, lambda = lambda, niters = niters,
k_neighbors = k_neighbors,
nearest_grid_nodes = nearest_grid_nodes,
mask_shapefile = NULL, all_networks = FALSE)
Sys.time() - tic
# Several parts of the code for Sea Currents to Connectivity Transformation
# are taken from the SeaGraphs R package
# https://github.com/cadam00/SeaGraphs
if (!is(component_u, "SpatRaster"))
stop("component_u must be a SpatRaster object.")
if (!is(component_v, "SpatRaster"))
stop("component_v must be a SpatRaster object.")
if ( (npoints <= 0) )
stop("npoints must must be a positive number.")
if (npoints != as.integer(npoints))
stop("npoints must be an integer number.")
if ( npoints <  nrow(origin_areas))
warning(
paste0("npoints < nrow(origin_areas). Some origin areas will",
" not have any point.")
)
if ( npoints <  nrow(destination_areas))
warning(
paste0("npoints < nrow(destination_areas). Some destination areas will",
" not have any point.")
)
if ( (k_neighbors <= 0) )
stop("k_neighbors must must be a positive number.")
if (k_neighbors != as.integer(k_neighbors))
stop("k_neighbors must be an integer number.")
if ( (nearest_grid_nodes <= 0) )
stop("nearest_grid_nodes must must be a positive number.")
if (nearest_grid_nodes != as.integer(nearest_grid_nodes))
stop("nearest_grid_nodes must be an integer number.")
if ( (niters < 0) )
stop("niters must must be a non-negative number.")
if (niters != as.integer(niters))
stop("niters must be an integer number.")
crs_component_u <- crs(component_u)
crs_component_v <- crs(component_v)
if (crs_component_u != crs_component_v)
stop(
paste0("Different coordinate system between component_u and component_v.",
" Check with crs(component_u) and crs(component_v).")
)
if (ext(component_u) != ext(component_v))
stop(
paste0("Different extent between component_u and component_v.",
" Check with ext(component_u) and ext(component_v).")
)
if (any(res(component_u) != res(component_v)))
stop(
paste0("Different resolution between component_u and component_v.",
" Check with res(component_u) and res(component_v).")
)
if (!((is(origin_areas, "sf") && is(origin_areas, "data.frame")) |
is(origin_areas, "sfc")))
stop(
paste0("origin_areas arguement must be both sf and data.frame or sfc.")
)
if (!((is(destination_areas, "sf") && is(destination_areas, "data.frame")) |
is(destination_areas, "sfc")))
stop(
paste0("destination_areas arguement must be both sf and data.frame or sfc.")
)
if (!all(st_is(origin_areas, 'MULTIPOLYGON') |
st_is(origin_areas, 'sfc_MULTIPOLYGON') |
st_is(origin_areas, 'POLYGON') |
st_is(origin_areas, 'sfc_POLYGON')
))
stop(
"origin_areas must be rows of 'POLYGON' or'MULTIPOLYGON' geometry type.")
if (!all(st_is(destination_areas, 'MULTIPOLYGON') |
st_is(destination_areas, 'sfc_MULTIPOLYGON') |
st_is(destination_areas, 'POLYGON') |
st_is(destination_areas, 'sfc_POLYGON')
))
stop(
"destination_areas must be rows of 'POLYGON' or'MULTIPOLYGON' geometry type.")
if (st_crs(origin_areas)$wkt != crs_component_u){
warning(
paste0(
"Different resolution or coordinates among component_u and",
" origin_areas:\nproject crs(component_u) on origin_areas."
)
)
origin_areas <- st_transform(origin_areas, crs = crs_component_u)
}
if (st_crs(destination_areas)$wkt != crs_component_u){
warning(
paste0(
"Different resolution or coordinates among component_u and",
" destination_areas:\nproject crs(component_u) on destination_areas."
)
)
destination_areas <- st_transform(destination_areas, crs = crs_component_u)
}
if (!is.null(mask_shapefile)){
is_mask_shapefile_sf         <- is(mask_shapefile, "sf")
is_mask_shapefile_SpatVector <- is(mask_shapefile, "SpatVector")
if (is_mask_shapefile_sf) {
if (st_crs(mask_shapefile)$wkt != crs_component_u){
warning(
paste0(
"Different resolution or coordinates among component_u and",
" mask_shapefile:\nproject crs(component_u) on mask_shapefile"
)
)
mask_shapefile <- st_transform(mask_shapefile, crs = crs_component_u)
}
} else if (is_mask_shapefile_SpatVector) {
if (crs(mask_shapefile) != crs_component_u){
warning(
paste0(
"Different resolution or coordinates among component_u and",
" mask_shapefile:\nproject crs(component_v) on mask_shapefile")
)
mask_shapefile <- project(mask_shapefile, crs_component_u)
}
} else {
stop("mask_shapefile must be either 'sf' or 'SpatVector' class.")
}
component_u <- crop(component_u, mask_shapefile, mask=TRUE)
component_v <- crop(component_v, mask_shapefile, mask=TRUE)
}
sf_u              <- st_as_sf(as.polygons(component_u))
origin_areas      <- st_intersection(origin_areas,      sf_u)
destination_areas <- st_intersection(destination_areas, sf_u)
st_crs(origin_areas)$wkt == crs_component_u
?st_intersection
covr::report()
covr::report()
library(SeaGames)
library(sf)
set.seed(42, "Mersenne-Twister", sample.kind="Rejection")
component_u       <- get_component_u()
component_v       <- get_component_v()
origin_areas      <- get_origin_areas()
destination_areas <- get_destination_areas()
out               <- suppressWarnings(
SeaGames(component_u, component_v, origin_areas,
destination_areas, npoints = 1, lambda = 1,
niters = 10, k_neighbors = 7, nearest_grid_nodes = 4,
mask_shapefile = NULL, all_networks = FALSE)
)
withWarnings <- function(expr) {
myWarnings <- NULL
wHandler <- function(w) {
myWarnings <<- c(myWarnings, list(w))
invokeRestart("muffleWarning")
}
val <- withCallingHandlers(expr, warning = wHandler)
list(value = val, warnings = myWarnings)
}
masked_result
masked_result <- suppressWarnings(
withWarnings(SeaGames(component_u, component_v, origin_areas,
destination_areas, npoints = 1, lambda = 1,
niters = 2, k_neighbors = 7,
nearest_grid_nodes = 4,
mask_shapefile = mask_shapefile,
all_networks = FALSE)))$warnings
## Examples of mask usage
mask_shapefile <- st_as_sf(st_as_sfc(st_bbox(component_u),
crs=terra::crs(component_u)))
mask_shapefile <- st_crop(mask_shapefile, terra::ext(mask_shapefile) / 1.2)
masked_result <- suppressWarnings(
withWarnings(SeaGames(component_u, component_v, origin_areas,
destination_areas, npoints = 1, lambda = 1,
niters = 2, k_neighbors = 7,
nearest_grid_nodes = 4,
mask_shapefile = mask_shapefile,
all_networks = FALSE)))$warnings
is(masked_result[[3]]
,"simpleWarning")
masked_result
masked_result <- suppressWarnings(
withWarnings(SeaGames(component_u, component_v,
st_transform(origin_areas,
crs = "+init=EPSG:4269"),
st_transform(destination_areas,
crs = "+init=EPSG:4269"),
npoints = 1, lambda = 1,
niters = 2, k_neighbors = 7,
nearest_grid_nodes = 4,
mask_shapefile =
st_transform(mask_shapefile,
crs = "+init=EPSG:4269"),
all_networks = FALSE)))$warnings
masked_result
covr::report()
library(SeaGames)
set.seed(42)
component_u       <- get_component_u()
component_v       <- get_component_v()
origin_areas      <- get_origin_areas()
destination_areas <- get_destination_areas()
# Warnings are thrown because of reassuring that components u/v and
# origin/destination areas are intersecting
out               <- SeaGames(component_u, component_v, origin_areas,
destination_areas, npoints = 1,  niters = 10)
library(SeaGames)
library(terra)
## terra 1.7.83
library(tmap)
## Breaking News: tmap 3.x is retiring. Please test v4, e.g. with
## remotes::install_github('r-tmap/tmap')
tmap_mode("view")
## tmap mode set to interactive viewing
# Get example u and v components
component_u <- get_component_u()
component_v <- get_component_v()
# Plot each component
par(mfrow=c(1,2), las=1)
plot(component_u, main="u")
plot(component_v, main="v")
origin_areas      <- get_origin_areas()
destination_areas <- get_destination_areas()
tm_shape(st_geometry(origin_areas)) +
tm_polygons(fill="x") +
tm_shape(st_geometry(destination_areas)) +
tm_polygons(fill="x")
tm_shape(origin_areas) +
tm_polygons(fill="x") +
tm_shape(destination_areas) +
tm_polygons(fill="x")
tm_shape(origin_areas) +
tm_polygons() +
tm_shape(destination_areas) +
tm_polygons()
tm_shape(origin_areas) +
tm_polygons(col="#1AFF1A") +
tm_shape(destination_areas) +
tm_polygons(col="#FFC20A")
tm_shape(origin_areas, col="#1AFF1A") +
tm_polygons() +
tm_shape(destination_areas, col="#FFC20A") +
tm_polygons()
sf::rbind
citation('SeaGames')
corridors
set.seed(42)
# Warnings are thrown because of reassuring that components u/v and
# origin/destination areas are intersecting
corridors <- SeaGames(component_u       = component_u,
component_v       = component_v,
origin_areas      = origin_areas,
destination_areas = destination_areas,
npoints           = 1,
niters            = 10)
set.seed(42)
# Warnings are thrown because of reassuring that components u/v and
# origin/destination areas are intersecting
corridors <- SeaGames(component_u       = component_u,
component_v       = component_v,
origin_areas      = origin_areas,
destination_areas = destination_areas,
npoints           = 10,
niters            = 10)
set.seed(42)
# Warnings are thrown because of reassuring that components u/v and
# origin/destination areas are intersecting
corridors <- SeaGames(component_u       = component_u,
component_v       = component_v,
origin_areas      = origin_areas,
destination_areas = destination_areas,
npoints           = 10,
niters            = 50)
out$net_result_congestion
library(sf)
names(corridors$solution_edges)[6] <- "uₗ"
tm_shape(st_as_sf(out$net_result_congestion, "edges"))+
tm_lines(col = "black",alpha = 0.05) +
tm_shape(corridors$solution_edges) +
tm_lines(col = "uₗ",lwd="uₗ", scale=10,
palette=colorRampPalette(c("blue", "red"))(10), n=10)+
tm_shape(out$origin_points) + tm_dots(col="#1AFF1A", size=0.1) +
tm_shape(out$destination_points) + tm_dots(col="#FFC20A", size=0.1)
names(corridors$solution_edges)[6] <- "uₗ"
tm_shape(st_as_sf(out$net_result_congestion, "edges"))+
tm_lines(col = "black",alpha = 0.05) +
tm_shape(corridors$solution_edges) +
tm_lines(col = "uₗ",lwd="uₗ", scale=10,
palette=colorRampPalette(c("blue", "red"))(10), n=10)+
tm_shape(corridors$origin_points) + tm_dots(col="#1AFF1A", size=0.1) +
tm_shape(corridors$destination_points) + tm_dots(col="#FFC20A", size=0.1)
names(corridors$solution_edges)[6] <- "uₗ"
tm_shape(st_as_sf(corridors$net_result_congestion, "edges"))+
tm_lines(col = "black",alpha = 0.05) +
tm_shape(corridors$solution_edges) +
tm_lines(col = "uₗ",lwd="uₗ", scale=10,
palette=colorRampPalette(c("blue", "red"))(10), n=10)+
tm_shape(corridors$origin_points) + tm_dots(col="#1AFF1A", size=0.1) +
tm_shape(corridors$destination_points) + tm_dots(col="#FFC20A", size=0.1)
library(ggplot2)
plot(x = corridors$metrics_df$niters,
y = corridors$metrics_df$rmse_u_l_perc_times_c_l)
plot(x    = corridors$metrics_df$niters,
y    = corridors$metrics_df$rmse_u_l_perc_times_c_l,
type = "l")
par(mfrow=1, las=1)
par(mfrow=c(1,1), las=1)
plot(x    = corridors$metrics_df$niters,
y    = corridors$metrics_df$rmse_u_l_perc_times_c_l,
type = "l")
set.seed(42)
# Warnings are thrown because of reassuring that components u/v and
# origin/destination areas are intersecting
corridors <- SeaGames(component_u       = component_u,
component_v       = component_v,
origin_areas      = origin_areas,
destination_areas = destination_areas,
npoints           = 10,
niters            = 100)
names(corridors$solution_edges)[6] <- "uₗ"
tm_shape(st_as_sf(corridors$net_result_congestion, "edges"))+
tm_lines(col = "black",alpha = 0.05) +
tm_shape(corridors$solution_edges) +
tm_lines(col = "uₗ",lwd="uₗ", scale=10,
palette=colorRampPalette(c("blue", "red"))(10), n=10)+
tm_shape(corridors$origin_points) + tm_dots(col="#1AFF1A", size=0.1) +
tm_shape(corridors$destination_points) + tm_dots(col="#FFC20A", size=0.1)
par(mfrow=c(1,1), las=1)
plot(x    = corridors$metrics_df$niters,
y    = corridors$metrics_df$rmse_u_l_perc_times_c_l,
type = "l")
plot(x    = corridors$metrics_df$niters,
y    = corridors$metrics_df$rmse_u_l_perc,
type = "l")
plot(x    = corridors$metrics_df$niters,
y    = corridors$metrics_df$rmse_u_l_perc,
ylab = bquote(RMSE(u_{l_{_{perc}}}),
plot(x     = corridors$metrics_df$niters,
y     = corridors$metrics_df$rmse_u_l_perc,
title = expression(RMSE(u_{l_{_{perc}}}),
expression(RMSE(u_{l_{_{perc}}})
expression(RMSE(u[l[[perc]]])
)
plot(x     = corridors$metrics_df$niters,
y     = corridors$metrics_df$rmse_u_l_perc,
title = expression(RMSE(u[l[[perc]]])),
lwd   = 2,
type  = "l")
plot(x    = corridors$metrics_df$niters,
y    = corridors$metrics_df$rmse_u_l_perc,
main = expression(RMSE(u[l[[perc]]])),
lwd  = 2,
type = "l")
plot(x    = corridors$metrics_df$niters,
y    = corridors$metrics_df$rmse_u_l_perc,
main = expression(RMSE(u[l[perc]])),
lwd  = 2,
type = "l")
plot(x    = corridors$metrics_df$niters,
y    = corridors$metrics_df$rmse_u_l_perc,
main = expression(RMSE(u[l[perc]])),
xlab = "Number of iterations",
ylab = "",
lwd  = 2,
type = "l")
tm_shape(st_as_sf(corridors$net_result_congestion, "edges"))+
tm_lines(col = "black",alpha = 0.05) +
tm_shape(corridors$solution_edges) +
tm_lines(col = "uₗ",lwd="uₗ", scale=10,
palette=colorRampPalette(c("blue", "red"))(10), n=10)+
tm_shape(corridors$origin_points) + tm_dots(col="#1AFF1A", size=0.1) +
tm_shape(corridors$destination_points) + tm_dots(col="#FFC20A", size=0.1)
devtools::build_manual()
